%code to sort timeseries data by Chan/Dots parcellation and create correlation matrix then create a group averaged correlation matrix

%set location of label.gii files
LHlabels='/Users/sara/Desktop/Chan_nodes_fsavg6_LH.func.gii'; 
RHlabels='/Users/sara/Desktop/Chan_nodes_fsavg6_RH.func.gii'; 

%uses gifti toolbox to load giftis
LHrois=gifti(LHlabels);
RHrois=gifti(RHlabels);

roiL = LHrois.cdata;
roiR = RHrois.cdata;


%% sort by system and remove nodes not in association or S/M system
addpath '/Users/sara/Desktop'
load('nodessystemID.mat')
[systemsorted, systemorder] = sort(Systems);    
Del0sys=systemsorted(:,1)==0;

%% remove non-system networks and sort by network of remaining nodes
load('Channodesinfo.mat')
nodes = Channodesinfo(systemorder,9);
nodes(Del0sys,:)=[];
%change order of network to what I want
nodes_reorder=zeros(size(nodes));
for jj=1:length(nodes{:,1})
        switch nodes{jj,1}
            case 3
                nodes_reorder(jj, 1)=1;
            case 6
                nodes_reorder(jj, 1)=2;
            case 14
                nodes_reorder(jj, 1)=3;
            case 7
                nodes_reorder(jj, 1)=4;
            case 15
                nodes_reorder(jj, 1)=5;
            case 20
                nodes_reorder(jj, 1)=6;
            case 5
                nodes_reorder(jj, 1)=7;
            case 24
                nodes_reorder(jj, 1)=8;
            case 4
                nodes_reorder(jj, 1)=9;
            case 16
                nodes_reorder(jj, 1)=10;
            otherwise
                disp('missing network value')
        end
end
[netsorted, netorder] = sort(nodes_reorder);
   
subs = dir('/Users/sara/Desktop/02_Data/P*');
%% Make sorted individual matrices
for ii= 1:length(subs)
    sub=subs(ii).name
    timepoint=strlength(sub)
        cd /Users/sara/Desktop/02_Data/
        cd (sub)
               for scan = 1:3
              %load mgh surface overlap files
              rh=['BOLDsurfrh', num2str(scan), '.mgh'];
              R=load_mgh(rh);
              lh=['BOLDsurfrh', num2str(scan), '.mgh'];
              L=load_mgh(lh);
              
              %pull out timeseries data from 4d array mgh
              timeseriesL =squeeze(L);
              timeseriesR=squeeze(R);
            
                    if scan==1
                    alltimeseriesL=(timeseriesL);
                    alltimeseriesR=(timeseriesR);
                    else
                    %concatenate 3 scans
                    alltimeseriesL=cat(2, alltimeseriesL, timeseriesL);
                    alltimeseriesR=cat(2, alltimeseriesR, timeseriesR);
                    end
                end
    
   
    glm = zeros(size(roiL,2),size(alltimeseriesL,2)); %Left
    grm = zeros(size(roiR,2),size(alltimeseriesR,2)); %Right       
    for j = 1:size(roiL,2) % loop ROIs
        glm(j,:) = mean(alltimeseriesL(roiL(:,j)~=0, :));
    end

    for k = 1:size(roiR,2)
        grm(k,:) = mean(alltimeseriesR(roiR(:,k)~=0, :));
    end

    allnodestimeseries=[glm;grm];
    
    %remove unidentified systems
    sortedtp = allnodestimeseries(systemorder,:);
    sortedtp(Del0sys,:)=[];

    %sort the matrix by node network membership
    sortedtp = sortedtp(netorder,:);
    
    %% save timepoints
    save(['/Users/sara/Desktop/02_Data/' sub '/Dots_sortedtimepointswnetworks.mat'], 'sortedtp');
    
    %% run correlation on sorted matrix
    r = corrcoef(sortedtp'); % Correlation matrix
    z = 0.5 * log((1+r)./(1-r)); % Fisher-z transform
    %save the z-matrix
    save(['/Users/sara/Desktop/02_Data/' sub '/funccorrsorted_zmatrix.mat'], 'z');
    %remove negative z values and save
    individualcorrpossort = max(0, z);
    save(['/Users/sara/Desktop/02_Data/' sub '/' sub 'funccorrsorted_zmatrix_posonly.mat'], 'individualcorrpossort');
    %else
    %end


    %% Create group correlation matrix
     % run timepoint 1 and timepoint 2 separately
    if timepoint==4 %timepoint 1
        if ii==1
            meancorrA = individualcorrpossort;
            countA=1;
        else
            meancorrA = meancorrA + individualcorrpossort;
            countA=countA+1;
        end
    elseif timepoint==5 %timepoint 2
         if ii==2
            meancorrB = individualcorrpossort;
            countB=1;
        else
            meancorrB = meancorrB + individualcorrpossort;
            countB=countB+1;
        end
    end
end
meancorrA = meancorrA/countA;
meancorrB = meancorrB/countB;
save('/Users/sara/Desktop/ScanTP1_meanfunccorrpos.mat', 'meancorrA');
save('/Users/sara/Desktop/ScanTP2_meanfunccorrpos.mat', 'meancorrB');
FigA=imagesc(meancorrA)
FigB=imagesc(meancorrB)
